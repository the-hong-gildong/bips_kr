<pre>
  BIP: 16
  제목: 컨센서스 (소프트 포크)
  제목: Pay to Script Hash
  작성자: 게빈 엔더슨(Gavin Andresen) <gavinandresen@gmail.com>
  코멘트-요약: 아직 코멘트 없음.
  코멘트-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0016
  상태: 최종
  타입: 표준 트랙
  생성일: 2012-01-03
</pre>
* 원문: https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki
* 싱크: https://github.com/bitcoin/bips/commit/0d77964a6b458f55dd8566295a0dd15179a44d9d

==초록==

본 BIP는 비트코인 스크립팅 시스템에 대한 새로운 "표준(standard)" 트랜잭션 유형을 설명하고, 새로운 트랜잭션에만 적용되는 추가 검증 규칙을 정의합니다.

==동기==

pay-to-script-hash의 목적은 트랜잭션 사용(redeem) 조건 충족에 대한 책임을 자금 송금자에게서 사용자(redeemer)에게로 이전하는 것입니다.

송금자는 QR코드를 스캔하거나 쉽게 복사하여 붙여넣을 수 있을 만큼 짧은 20바이트의 고정 길이 해시를 사용하여 아무리 복잡한 거래라도 임의의 거래를 통해 송금할 수 있다는 이점이 있습니다.

==스펙==

릴레이되거나 채굴된 블록에 포함되는 새로운 표준 트랜잭션 유형은 다음과 같이 정의됩니다:

    OP_HASH160 [20-byte-hash-value] OP_EQUAL

[20-byte-hash-value]는 스택에 20바이트를 푸시하는 오피코드(0x14)에 이어서 정확히 20바이트가 뒤따라야합니다.

이 새로운 트랜잭션 유형은 표준 scriptSig에 의해 다음과 같이 사용됩니다(redeem):

    ...signatures... {serialized script}

이러한 pay-to-script 아웃포인트를 사용(redeem)하는 트랜잭션은 '직렬화된 스크립트'('리딤 스크립트'라고도 함)가 그 자체로 또 다른 표준 트랜잭션 유형 중 하나인 경우에만 표준 트랜잭션으로 간주됩니다.

트랜잭션을 릴레이하거나 새 블록에 포함할지 고려할 때 이러한 아웃포인트를 검증하는 규칙은 다음과 같습니다:

# scriptSig에 "데이터 푸시" 연산 이외의 연산이 있는 경우 검증이 실패합니다.
# 일반 검증이 수행됩니다: 서명과 {serialized script}로 초기 스택이 생성되고 스크립트의 해시가 계산되며, 이 해시가 아웃포인트에 있는 해시와 일치하지 않으면 검증이 즉시 실패합니다.
#  초기 스택에서 {serialized script}가 팝되고, 팝된 스택과 역직렬화된 스크립트를 scriptPubKey로 사용하여 다시 트랜잭션을 검증합니다.

이 새로운 규칙은 timestamps >= 1333238400(2012년 4월 1일)인 블록의 트랜잭션을 검증할 때만 적용되어야 합니다<ref>[https://github.com/bitcoin/bitcoin/commit/8f188ece3c82c4cf5d52a3363e7643c23169c0ff Remove -bip16 and -paytoscripthashtime command-line arguments]</ref>. 새로운 검증 규칙에 실패한 1333238400 이전의 트랜잭션이 블록체인에 있습니다 <ref>[https://web.archive.org/web/20141122040355/http://blockexplorer.com/tx/6a26d2ecb67f27d1fa5524763b49029d7106e91e3cc05743073461a719776192 Transaction 6a26d2ecb67f27d1fa5524763b49029d7106e91e3cc05743073461a719776192]</ref>. 이전 트랜잭션은 이전 규칙에 따라 검증해야 합니다(자세한 내용은 하위 호환성(Backwards Compatibility) 섹션을 참고하세요).

예를 들어, 하나의-서명이-필요한-트랜잭션에 대한 scriptPubKey 및 해당 scriptSig는 다음과 같습니다:

    scriptSig: [signature] {[pubkey] OP_CHECKSIG}
    scriptPubKey: OP_HASH160 [20-byte-hash of {[pubkey] OP_CHECKSIG} ] OP_EQUAL

{serialized script}의 서명 연산은 다음과 같이 블록당 허용되는 최대 개수(20,000)를 따라야 합니다:

# OP_CHECKSIG 와 OP_CHECKSIGVERIFY 는 평가 여부와 상관없이 하나의 서명 연산으로 카운트됩니다.
# OP_1~OP_16에 선행하는 OP_CHECKMULTISIG와 OP_CHECKMULTISIGVERIFY는 평가 여부와 상관없이 1~16개의 서명 연산으로 카운트됩니다.
# 그 외의 모든 OP_CHECKMULTISIG와 OP_CHECKMULTISIGVERIFY는 20개의 서명 연산으로 카운트됩니다.

예시:

+3 서명 연산:
    {2 [pubkey1] [pubkey2] [pubkey3] 3 OP_CHECKMULTISIG}

+22 서명 연산:
    {OP_CHECKSIG OP_IF OP_CHECKSIGVERIFY OP_ELSE OP_CHECKMULTISIGVERIFY OP_ENDIF}

==근거==

본 BIP는 새로운 스크립트 오피코드("OP_EVAL")를 제안한 BIP 12를 대체하며, 해당 BIP의 모든 기능과 그 이상을 수행합니다.

본 BIP(그리고 BIP 13, pay-to-script-hash 주소 형식)의 동기는 어쨌든 논쟁의 여지가 있습니다. 몇몇 사람들은 이것이 불필요하고 복잡한/멀티시그 트랜잭션 형식은 그야말로 전송자가 완전한 {serialized script}를 제공하면서 지원되어야 한다고 느낍니다. 저자는 본 BIP가 Base58로 인코딩된 20바이트 비트코인 주소로 자금을 전송할 수 있도록 이미 만들어진 모든 인프라의 변경을 최소화하여 판매자와 거래소 및 기타 소프트웨어가 다중 서명 거래를 더 빨리 지원할 수 있도록 할 것이라고 믿습니다.

하나의 '특수한' 형태의 scriptPubKey를 감지하고 그 때 추가로 검증을 수행하는 것은 보기 싫습니다. 그러나 대안은 더 보기 싫게 생겼습니다. 구현하기에 더 복잡하거나 언어의 힘을 위험한 방식으로 확장한다는 데 의견이 일치하고 있습니다.

서명 연산 카운팅 규칙은 {serialized script}를 정적으로 스캔해서 쉽고 빠르게 구현할 수 있도록 고안되었습니다. 비트코인은 채굴자에 대한 서비스 거부 공격(denial-of-service attacks)을 방지하기 위해 블록당 최대 서명 연산 수를 제한합니다. 만약 제한이 없다면, 악성 채굴자가 수십만 개의 ECDSA 서명 작업이 필요한 블록을 브로드캐스트할 수 있으며, 나머지 네트워크가 현재 블록을 검증하는 동안 다음 블록을 먼저 계산할 수 있게 될 것입니다.

이전의 구현에 1-컨펌 공격이 가능합니다. 하지만 이것은 실제로 비용이 많이 들고 어렵습니다. 그 공격은 다음과 같습니다:

# 공격자는 이전 소프트웨어에서는 유효하지만 새로운 구현에서는 유효하지 않은 pay-to-script-hash 트랜잭션을 생성하고 이를 사용하여 코인을 공격자 자신에게 전송합니다.
# 공격자는 또한 pay-to-script 트랜잭션을 사용하는 표준 트랜잭션을 생성하여 이전 소프트웨어를 실행 중인 피해자에게 지불합니다.
# 공격자는 두 트랜잭션이 모두 포함된 블록을 채굴합니다.

피해자가 1-컨펌 결제를 수락하면 나머지 네트워크가 공격자의 무효 블록을 덮어쓸 때 두 트랜잭션이 모두 무효화되므로 공격자가 승리하게 됩니다.

이 공격은 공격자가 나머지 네트워크에서 무효화될 것을 알고 있는 블록을 생성해야 하기 때문에 비용이 많이 듭니다. 블록을 생성하는 것이 어렵고 사용자가 더 높은 가치의 트랜잭션일 수록 1-컨펌 트랜잭션을 수락하지 않을 것이기 때문에 어렵습니다.

==하위 호환성==

이전 구현에서 이러한 트랜잭션들은 (일반적으로) 릴레이되지 않거나 블록에 포함되지 않는 비표준 트랜잭션입니다.

이전 구현에서도 본 BIP를 완전히 지원하는 소프트웨어에서 생성한 블록을 검증할 때 {serialize script}의 해시 값이 일치하는지 확인합니다. 하지만 다른 검증은 수행하지 않습니다.

악의적인 pay-to-script 트랜잭션에 의한 블록체인 분기를 피하기 위해 다음의 한 케이스를 신중히 다뤄야 합니다:

* 새로운 클라이언트/채굴자에게는 유효하지 않지만 이전 클라이언트/채굴자에게는 유효한 pay-to-script-hash 트랜잭션.

블록체인을 점진적으로 업그레이드하고 오래 지속되는 블록체인 분할이 발생하지 않도록 하려면 채굴자의 50% 이상이 새로운 트랜잭션 유형의 완전한 검증을 지원해야 하며, 동시에 이전 검증 규칙에서 새로운 규칙으로 전환해야 합니다.

해싱 파워의 50% 이상이 본 BIP를 지원하는지 여부를 판단하기 위해 채굴자는 소프트웨어를 업그레이드하고 그들이 생성하는 블록의 코인베이스 트랜잭션 입력에 "/P2SH/" 문자열을 넣어야 합니다.

2012년 2월 1일, 블록체인을 검사하여 지난 7일 동안 pay-to-script-hash를 지원하는 블록의 수를 확인합니다. 550개 이상의 코인베이스에 "/P2SH/"가 포함된 경우, 2012년 2월 15일 00:00:00 GMT 이후로 타임스탬프가 찍혀있는 모든 블록은 pay-to-script-hash 트랜잭션을 완전히 검증받아야 합니다. 일주일에 약 1,000개의 블록이 생성되므로 550개가 새로운 기능을 지원하는 네트워크의 약 55%가 될 것입니다.

해시 파워의 과반수가 새로운 검증 규칙을 지지하지 않으면 롤아웃이 연기됩니다(또는 과반수를 얻지 못할 것이 분명해지면 거부됩니다).

===직렬화된 스크립트 크기의 520 바이트 제약===

하위 호환성 요구 사항으로 인해 직렬화된 스크립트 자체에는 520바이트보다 큰 데이터를 스택에 푸시할 수 없다는 규칙을 포함하여 PUSHDATA 연산 이외의 연산이 금지되는 동일한 규칙이 적용됩니다. 따라서 P2SH 출력이 참조하는 리딤 스크립트의 길이가 520바이트를 초과하는 경우 P2SH 출력을 사용할 수 없습니다. 예를 들어 OP_CHECKMULTISIG 오피코드는 자체적으로 최대 20개의 공개키를 허용하지만, 33바이트 압축 pubkey를 사용할 때 최대 15개의 공개키만 P2SH 출력(3바이트 + 15개의 pubkey * 34바이트/ubkey = 513바이트)으로 사용할 수 있습니다.

==참조 구현==

https://gist.github.com/gavinandresen/3966071

==함께 보세요==

* https://bitcointalk.org/index.php?topic=46538
* The [[bip-0013.mediawiki|Address format for Pay to Script Hash BIP]]
* M-of-N Multisignature Transactions [[bip-0011.mediawiki|BIP 11]]
* [[bip-0016/qa.mediawiki|Quality Assurance test checklist]]

== 참고 자료 ==
<references>
