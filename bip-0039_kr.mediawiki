<pre>
  BIP: 39
  레이어: 애플리케이션
  제목: 결정론적 키를 생성하기 위한 니모닉 코드
  작성자: 마렉 팔라티누스(Marek Palatinus) <slush@satoshilabs.com>
          파볼 루스낙(Pavol Rusnak) <stick@satoshilabs.com>
          아론 보이신(Aaron Voisine) <voisine@gmail.com>
          세안 보웨(Sean Bowe) <ewillbefull@gmail.com>
  코멘트-요약: 만장일치로 구현을 권장하지 않음
  코멘트-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0039
  상태: 제안됨
  타입: 표준 트랙
  생성일: 2013-09-10
</pre>
* 원문: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
* 싱크: https://github.com/bitcoin/bips/commit/fd5d424f551bf740f6f651b0158667d1fd052193

==초록==

이 BIP는 결정론적 지갑을 생성하기 위해 니모닉 코드 또는 니모닉 문장 -- 기억하기 쉬운 단어의 집합 -- 의 구현을 설명합니다.

니모닉을 생성하고 이를 바이너리 시드로 변환하는 두 부분으로 구성됩니다. 이 시드는 나중에 BIP-0032 또는 유사한 방법을 사용하여 결정론적 지갑을 생성하는 데 사용할 수 있습니다.

==동기==

니모닉 코드나 문장은 지갑 시드의 바이너리(raw binary) 또는 16진수 표현을 처리하는 것보다 사람과 상호작용하는 데 더 유용합니다. 이 문장은 종이에 쓰거나 전화로 말할 수 있습니다.

이 가이드는 컴퓨터가 생성한 무작위성을 사람이 읽을 수 있는 기록으로 전송하는 방법을 설명합니다. 사용자가 만든 문장(브레인월렛이라고도 함)을 지갑 시드로 처리하는 방법은 아닙니다.

==니모닉 생성==

니모닉은 엔트로피를 32비트의 배수로 인코딩해야 합니다. 엔트로피가 높을수록 보안은 향상되지만 문장 길이가 늘어납니다. 초기 엔트로피 길이를 ENT라고 합니다. ENT의 허용 크기는 128-256비트입니다.

먼저 ENT 비트의 초기 엔트로피가 생성됩니다. 체크섬은 첫 번째 <code>ENT / 32</code> 비트의 SHA256 해시로 생성됩니다. 이 체크섬은 초기 엔트로피의 끝에 추가됩니다. 다음으로, 이렇게 연결된 비트는 11비트 그룹으로 나뉘어 각각 0-2047 사이의 숫자를 인코딩하여 단어 목록의 인덱스 역할을 합니다. 마지막으로, 이러한 숫자를 단어로 변환하고 결합된 단어를 니모닉 문장으로 사용합니다.

다음 표에서는 초기 엔트로피 길이(ENT), 체크섬 길이(CS), 생성된 니모닉 문장(MS)의 길이(단어 개수) 간의 관계를 설명합니다.

<pre>
CS = ENT / 32
MS = (ENT + CS) / 11

|  ENT  | CS | ENT+CS |  MS  |
+-------+----+--------+------+
|  128  |  4 |   132  |  12  |
|  160  |  5 |   165  |  15  |
|  192  |  6 |   198  |  18  |
|  224  |  7 |   231  |  21  |
|  256  |  8 |   264  |  24  |
</pre>

==단어 목록==

이상적인 단어 목록에는 다음과 같은 특징이 있습니다:

a) 현명한 단어 선택
   - 단어 목록은 처음 네 글자를 입력하는 것만으로도 충분히 단어를 명확하게
     식별 할 수 있도록 만들어집니다.

b) 비슷한 단어 피하기
   - "build"와 "built", "woman"과 "women", "quick"과 "quickly" 같은 단어 쌍은
     문장을 기억하기 어려울 뿐만 아니라 오류가 발생하기 쉽고 추측하기도 더 어렵습니다.

c) 정렬된 단어 목록
   - 단어 목록이 정렬되어 코드 단어를 보다 효율적으로 조회할 수 있습니다
     (즉, 구현에서 선형 검색 대신 이진 검색을 사용할 수 있음).
   - 이것은 트라이(trie, a prefix tree)를 사용할 수도 있습니다.
     (예를들어 더 나은 압축을 위해서)

단어 목록에는 네이티브 문자가 포함될 수 있지만, NFKD(정규화 형식 호환성 분해)를 사용하여 UTF-8로 인코딩해야만 합니다.

==니모닉에서 시드로==

사용자는 패스프레이즈로 니모닉을 보호할 수 있습니다. 패스프레이즈가 없는 경우 빈 문자열 ""이 대신 사용됩니다.

니모닉에서 바이너리 시드를 생성하기 위해 니모닉 문장(UTF-8 NFKD)을 비밀번호로 사용하고 "니모닉" + 패스프레이즈(다시 UTF-8 NFKD)를 솔트로 사용하는 PBKDF2 함수를 사용합니다. 반복 횟수는 2048로 설정되어 있으며 슈도 랜덤 함수로 HMAC-SHA512가 사용됩니다. 유도된 키의 길이는 512비트(=64바이트)입니다.

이 시드는 나중에 BIP-0032 또는 유사한 방법을 사용하여 결정론적 지갑을 생성하는 데 사용할 수 있습니다.

니모닉 문장을 바이너리 시드로 변환하는 것은 문장 생성과는 완전히 독립적입니다. 따라서 코드가 매우 간단하며, 문장 구조에 대한 제약이 없고 클라이언트가 자체 단어 목록 또는 전체 문장 생성기를 자유롭게 구현할 수 있어 오타 감지 또는 기타 목적을 위한 단어 목록에 유연성을 부여할 수 있습니다.

'니모닉 생성하기(Generating the mnemonic)' 섹션에 설명된 알고리즘으로 생성되지 않은 니모닉을 사용할 수도 있지만, 이는 권장되지 않으며 소프트웨어는 단어 목록을 사용하여 니모닉 문장에 대한 체크섬을 계산하고 유효하지 않은 경우 경고해야 합니다. 

모든 패스프레이즈가 유효한(valid) 시드(따라서 결정론적 지갑)를 생성하지만, 올바른(correct) 패스프레이즈만이 원하던 지갑을 사용할 수 있기 때문에 설명한 방법은 그럴듯한 거부 가능성도 제공합니다.

==단어 목록==

대부분의 BIP39 지갑은 영어 단어 목록만 지원하므로, 니모닉 문장을 생성할 때 영어가 아닌 단어 목록을 사용하는 것은 '''강력히 권장하지 않습니다'''

그래도 애플리케이션에 현지화된 단어 목록을 사용해야 한다고 생각되면 직접 만들지 말고 다음 중 하나를 사용하세요.

* [[bip-0039/bip-0039-wordlists.md|Wordlists]]

==테스트 벡터==

테스트 벡터에는 입력 엔트로피, 니모닉 및 시드가 포함됩니다. 모든 벡터에는 패스프레이즈 "TREZOR"가 사용됩니다.

https://github.com/trezor/python-mnemonic/blob/master/vectors.json

또한 https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json 를 보세요.

(일본어 단어 목록은 패스프레이즈로 사용된 매우 정규화된 심볼들과 함께 테스트 하였습니다)

==참조 구현==

단어 목록을 포함한 참조 구현은 다음에서 확인할 수 있습니다.

http://github.com/trezor/python-mnemonic
